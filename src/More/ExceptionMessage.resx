<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentLessThanOne" xml:space="preserve">
    <value>The value must be greater than or equal to one.</value>
  </data>
  <data name="ArgumentLessThanZero" xml:space="preserve">
    <value>The value must be greater than or equal to zero.</value>
  </data>
  <data name="ArgumentOutOfRangeBadYearMonthDay" xml:space="preserve">
    <value>Year, Month, and Day parameters describe an un-representable DateTime.</value>
  </data>
  <data name="ArgumentOutOfRangeInvalidEraValue" xml:space="preserve">
    <value>Era value was not valid.</value>
  </data>
  <data name="ArgumentOutOfRangeMonth" xml:space="preserve">
    <value>Month must be between one and twelve.</value>
  </data>
  <data name="ArgumentOutOfRangeNeedNonNegNum" xml:space="preserve">
    <value>Non-negative number required.</value>
  </data>
  <data name="ArgumentOutOfRangeRange" xml:space="preserve">
    <value>Valid values are between {0} and {1}, inclusive.</value>
  </data>
  <data name="ArgumentResultCalendarRange" xml:space="preserve">
    <value>The result is out of the supported range for this calendar. The result should be between {0} (Gregorian date) and {1} (Gregorian date), inclusive.</value>
  </data>
  <data name="ArrayMismatch" xml:space="preserve">
    <value>The specified array is not of the correct type.</value>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>The specified array is too small to copy the number of elements to.</value>
  </data>
  <data name="BogusIComparer" xml:space="preserve">
    <value>IComparer (or the IComparable methods it relies upon) did not return zero when Array.Sort called x. CompareTo(x). x: '{0}'  x's type: '{1}' The IComparer: '{2}'.</value>
  </data>
  <data name="CannotEndInitBeforeBeginInit" xml:space="preserve">
    <value>The object cannot end initialization before it has started.</value>
  </data>
  <data name="CannotInitializeMoreThanOnce" xml:space="preserve">
    <value>The object cannot be initialized more than once.</value>
  </data>
  <data name="CannotRegisterExistingItemAsNew" xml:space="preserve">
    <value>An existing item cannot be registered as a new item.</value>
  </data>
  <data name="CannotRegisterRemovedItemAsNew" xml:space="preserve">
    <value>A removed item cannot be registered as a new item.</value>
  </data>
  <data name="CollectionAfterLast" xml:space="preserve">
    <value>The current position of the enumerator is after the last element.</value>
  </data>
  <data name="CollectionBeforeFirst" xml:space="preserve">
    <value>The current position of the enumerator is before the first element.</value>
  </data>
  <data name="CollectionCannotEnumerate" xml:space="preserve">
    <value>Enumeration has either not started or has already finished.</value>
  </data>
  <data name="CollectionModified" xml:space="preserve">
    <value>The collection was modified after the enumerator was created.</value>
  </data>
  <data name="CollectionReadOnly" xml:space="preserve">
    <value>The collection is read-only. Items cannot be added, removed, or substituted.</value>
  </data>
  <data name="ConcurrentCollection_SyncRoot_NotSupported" xml:space="preserve">
    <value>The SyncRoot property may not be used for the synchronization of concurrent collections.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_ArrayIncorrectType" xml:space="preserve">
    <value>The array is multidimensional, or the type parameter for the set cannot be cast automatically to the type of the destination array.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_ArrayNotLargeEnough" xml:space="preserve">
    <value>The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_CapacityMustNotBeNegative" xml:space="preserve">
    <value>The capacity argument must be greater than or equal to zero.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_ConcurrencyLevelMustBePositive" xml:space="preserve">
    <value>The concurrencyLevel argument must be positive.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_IndexIsNegative" xml:space="preserve">
    <value>The index argument is less than zero.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_ItemKeyIsNull" xml:space="preserve">
    <value>TKey is a reference type and item.Key is null.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_KeyAlreadyExisted" xml:space="preserve">
    <value>The key already existed in the dictionary.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_SourceContainsDuplicateKeys" xml:space="preserve">
    <value>The source argument contains duplicate keys.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_TypeOfKeyIncorrect" xml:space="preserve">
    <value>The key was of an incorrect type for this dictionary.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConcurrentDictionary_TypeOfValueIncorrect" xml:space="preserve">
    <value>The value was of an incorrect type for this dictionary.</value>
    <comment>Copied from mscorlib</comment>
  </data>
  <data name="ConfigurationErrorsException" xml:space="preserve">
    <value>An unspecified error occurred.</value>
  </data>
  <data name="CountTooLarge" xml:space="preserve">
    <value>The count must be less than or equal to the total number of elements in the sequence.</value>
  </data>
  <data name="DictionaryReadOnly" xml:space="preserve">
    <value>The dictionary is read-only. Items cannot be added, removed, or substituted.</value>
  </data>
  <data name="EditTransactionNotStarted" xml:space="preserve">
    <value>A transaction has not been started.</value>
  </data>
  <data name="EndInvokeCalledTwice" xml:space="preserve">
    <value>EndInvoke can only be called once for each asynchronous operation.</value>
  </data>
  <data name="EndInvokeNotCalled" xml:space="preserve">
    <value>EndInvoke has not been called for the current asynchronous operation.</value>
  </data>
  <data name="ExpressionMustReferToPropertyOfDeclaredType" xml:space="preserve">
    <value>The expression '{0}' must refer to a property declared by type {1}.</value>
  </data>
  <data name="ExpresssionMustReferToInstanceProperty" xml:space="preserve">
    <value>The expression '{0}' must refer to a public, instance property.</value>
  </data>
  <data name="ExpresssionMustReferToProperty" xml:space="preserve">
    <value>The expression '{0}' must refer to a property.</value>
  </data>
  <data name="HashSetCapacityOverflow" xml:space="preserve">
    <value>HashSet capacity is too big.</value>
  </data>
  <data name="IComparerFailed" xml:space="preserve">
    <value>Failed to compare two elements in the array.</value>
  </data>
  <data name="IndexOutOfRange" xml:space="preserve">
    <value>The specified index is out of bounds.</value>
  </data>
  <data name="InvalidActivityId" xml:space="preserve">
    <value>The specified activity identifier is invalid. The value must be a globally unique identifier (GUID).</value>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>Cannot convert type '{0}' to type '{1}'.</value>
  </data>
  <data name="InvalidDelegateType" xml:space="preserve">
    <value>'{0}' is not a delegate type.</value>
  </data>
  <data name="InvalidFormatString" xml:space="preserve">
    <value>Input string was not in a correct format.</value>
  </data>
  <data name="InvalidObjectType" xml:space="preserve">
    <value>Object must be of type {0}.</value>
  </data>
  <data name="MissingRequiredService" xml:space="preserve">
    <value>A required service of type '{0}' could not be found.</value>
  </data>
  <data name="MoreThanOneElement" xml:space="preserve">
    <value>Sequence contains more than one element.</value>
  </data>
  <data name="MoreThanOneMatch" xml:space="preserve">
    <value>Sequence contains more than one matching element.</value>
  </data>
  <data name="MultipleUnitOfWorkFactory" xml:space="preserve">
    <value>Multiple factories have been registered for a unit of work of type '{0}'.</value>
  </data>
  <data name="MustMatchEpochStartDay" xml:space="preserve">
    <value>The day of week must be the same as epoch ({0:G}).</value>
  </data>
  <data name="NestedEditTransactionDetected" xml:space="preserve">
    <value>A transaction has already been started.  Nested transactions are not supported.</value>
  </data>
  <data name="NestedInitializationDetected" xml:space="preserve">
    <value>Object initialization has already started.  Nested initialization scopes are not supported.</value>
  </data>
  <data name="NoElements" xml:space="preserve">
    <value>Sequence contains no elements.</value>
  </data>
  <data name="NoMatch" xml:space="preserve">
    <value>Sequence contains no matching element.</value>
  </data>
  <data name="PageNumberMustBeGreaterThanZero" xml:space="preserve">
    <value>When paging a sequence, the pageNumber must be at least 0.</value>
  </data>
  <data name="PageSizeMustBeGreaterThanZero" xml:space="preserve">
    <value>When paging a sequence, the pageSize must be at least 1.</value>
  </data>
  <data name="PropertyIsReadOnly" xml:space="preserve">
    <value>The '{0}' property is read-only.</value>
  </data>
  <data name="QueueDoesNotSupportRemove" xml:space="preserve">
    <value>Queues do not support removing arbitrary items.  Use the Dequeue method instead.</value>
  </data>
  <data name="QueueIsEmpty" xml:space="preserve">
    <value>The queue is empty.</value>
  </data>
  <data name="StackDoesNotSupportRemove" xml:space="preserve">
    <value>Stacks do not support removing arbitrary items.  Use the Pop method instead.</value>
  </data>
  <data name="StackIsEmpty" xml:space="preserve">
    <value>The stack is empty.</value>
  </data>
  <data name="UnmappedUnitOfWorkFactory" xml:space="preserve">
    <value>No factory has been registered for a unit of work of type '{0}'.</value>
  </data>
  <data name="WrongIAsyncResult" xml:space="preserve">
    <value>IAsyncResult object did not come from the corresponding async method on this type.</value>
  </data>
</root>