<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

 <PropertyGroup>
  <RootDirectory>$(MSBuildThisFileDirectory)</RootDirectory>
  <!--<VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">14.0</VisualStudioVersion>-->
  <VisualStudioVersion>14.0</VisualStudioVersion>
  <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
 </PropertyGroup>

 <UsingTask TaskName="GetPackageMetadata" AssemblyFile="$(RootDirectory)Build\bin\More.Build.Tasks.dll" />
 <UsingTask TaskName="ResolvePackageReference" AssemblyFile="$(RootDirectory)Build\bin\More.Build.Tasks.dll" />

 <PropertyGroup>
  <NuGetExe>$(RootDirectory)packages\NuGet.CommandLine.2.8.6\tools\nuget.exe</NuGetExe>
  <PackageOutDir>$(RootDirectory)NuGet</PackageOutDir>
  <NuGetPackTarget>$(ProjectPath)</NuGetPackTarget>
  <NuGetPackProperties Condition=" '$(Configuration)'=='' ">configuration=Release</NuGetPackProperties>
  <NuGetPackProperties Condition=" '$(Configuration)'!='' ">configuration=$(Configuration)</NuGetPackProperties>
  <TransformOnBuild>true</TransformOnBuild>
  <TransformOutOfDateOnly>false</TransformOutOfDateOnly>
  <BeforeTransform>ResolveNuGetPackageRef</BeforeTransform>
 </PropertyGroup>

 <Target Name="BeforeBuild" Condition="Exists('$(PackageOutDir)')">

  <ItemGroup>
   <OldNuPkgFile Include="$(PackageOutDir)\$(TargetName)*.nupkg" />
  </ItemGroup>

  <!-- delete any existing *.nupkg files -->
  <Delete Files="@(OldNuPkgFile)" ContinueOnError="true" />

 </Target>

 <Target Name="ResolveNuGetPackageRef">

  <!-- resolve current NuGet semantic version from each project
       note: for ease of management just resolve them all and let the templates decide which values to use -->

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)Core\Core\Core.csproj">
   <Output PropertyName="CoreVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)Core\CoreEx.Desktop\CoreEx.Desktop.csproj">
   <Output PropertyName="CoreExVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)Composition\Composition\Composition.csproj">
   <Output PropertyName="CompositionVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)UI\UI\UI.csproj">
   <Output PropertyName="UIVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)UI\UIEx.Desktop\UIEx.Desktop.csproj">
   <Output PropertyName="UIExVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)Windows\Windows.Desktop\Windows.Desktop.csproj">
   <Output PropertyName="PresentationVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <ResolvePackageReference SourceProjectPath="$(RootDirectory)Hosting\Hosting.Desktop\Hosting.Desktop.csproj">
   <Output PropertyName="HostingVersion" TaskParameter="SemanticVersion" />
  </ResolvePackageReference>

  <!-- map resolved versions to t4 parameter values so they can be used in templates (*.tt) -->
  <ItemGroup>
   <T4ParameterValues Include="CoreVersion">
    <Value>$(CoreVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="CoreExVersion">
    <Value>$(CoreExVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="CompositionVersion">
    <Value>$(CompositionVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="UIVersion">
    <Value>$(UIVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="UIExVersion">
    <Value>$(UIExVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="PresentationVersion">
    <Value>$(PresentationVersion)</Value>
   </T4ParameterValues>
   <T4ParameterValues Include="HostingVersion">
    <Value>$(HostingVersion)</Value>
   </T4ParameterValues>
  </ItemGroup>

 </Target>

 <!-- only run this target when the pack target is not the source project itself
      note: this is typically when a *.nuspec file is directly specified, which
      usually occurs for when advanced dependency groups are needed. multiple
      dependency groups are apparently not supported (or not correctly supported)
      when running "pack" against a source project -->
 <Target Name="ResolveNuGetMetadata" Condition=" '$(NuGetPackTarget)' != '$(ProjectPath)' ">

  <!-- use custom task to resolve metadata tokens for *.nuspec file -->
  <GetPackageMetadata SourceProjectPath="$(ProjectPath)">
   <Output PropertyName="PackageVersion" TaskParameter="SemanticVersion" />
   <Output PropertyName="PackageAuthor" TaskParameter="Author" />
   <Output PropertyName="PackageDescription" TaskParameter="Description" />
  </GetPackageMetadata>

  <!-- append resolved metadata tokens -->
  <PropertyGroup>
   <NuGetPackProperties>id=$(AssemblyName);version=$(PackageVersion);author=$(PackageAuthor);description=$(PackageDescription);$(NuGetPackProperties)</NuGetPackProperties>
  </PropertyGroup>

 </Target>

 <Target Name="AfterBuild" DependsOnTargets="ResolveNuGetMetadata">

  <!-- create output folder as necessary -->
  <MakeDir Condition="!Exists('$(PackageOutDir)')" Directories="$(PackageOutDir)" />

  <!-- create packages -->
  <Exec Command="&quot;$(NuGetExe)&quot; pack &quot;$(NuGetPackTarget)&quot; -Properties &quot;$(NuGetPackProperties)&quot; -OutputDirectory &quot;$(PackageOutDir)&quot; -NoPackageAnalysis -NonInteractive -Verbosity quiet" />

 </Target>

 <!-- import t4 targets so we can enable transform on build -->
 <Import Project="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.targets" />
 
</Project>